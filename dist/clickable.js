'use strict';

var ClickableCautions = function ClickableCautions(constructed) {
  var i = this.formatConstructed(constructed);
  i.warn = this.warn.bind(i);
  i.warn();
  return i;
};
ClickableCautions.prototype = {
  formatConstructed: function formatConstructed(constructed) {
    var i = constructed || {};
    i.warnings = i.warnings || [];
    if (constructed === undefined) {
      i.warnings.push('needs a valid clickable constructor to do anything');
      this.warn.call(i);
      return i;
    }
    return i;
  },
  warn: function warn() {
    for (var j = 0; j < this.warnings.length; j++) {
      console.warn(this.warnings[j]);
    }
  }
};
'use strict';
var ClickableConstructor = function ClickableConstructor(args) {
  var auto = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var defaults = {
    wrapper: '.js-clickable-interaction',
    content: '.js-clickable-content-area',
    indicators: '.js-clickable-content-indicator',
    navigation: {
      targets: '.js-clickable-target',
      prev: '.js-clickable-prev',
      next: '.js-clickable-next'
    },
    meta: {
      clear: '.js-clickable-clear',
      start: '.js-clickable-start'
    },
    infinite: true,
    toggle: false
  };
  this.constructed = new ClickableCautions(defaults);
  this.constructed = this.mergeArgs(this.constructed, args);
  this.constructed = this.setDefaults(this.constructed);
  if (auto) {
    this.constructed = this.init(this.constructed);
    this.constructed.total = this.constructed.contentAreas.length || 0;
  }
  return this.constructed;
};
ClickableConstructor.prototype = {
  mergeArgs: function mergeArgs(defaults, override) {
    var i = {};
    for (var attr in defaults) {
      i[attr] = defaults[attr];
    }
    for (var attr in override) {
      if (defaults[attr] !== undefined) {
        i[attr] = override[attr];
      }
    }
    return i;
  },
  setDefaults: function setDefaults(constructed) {
    var i = constructed;
    i._index = 0;
    Object.defineProperty(i, 'index', {
      configurable: true,
      get: function get() {
        return i._index;
      },
      set: function set(val) {
        return i._index = val;
      }
    });
    Object.defineProperty(i, 'printIndex', {
      configurable: true,
      get: function get() {
        return this._index;
      }
    });
    i._total = 0;
    Object.defineProperty(i, 'total', {
      configurable: true,
      get: function get() {
        return i._total;
      },
      set: function set(val) {
        return i._total = val;
      }
    });
    i.get = this.getDepth;
    return i;
  },
  init: function init(constructed) {
    var i = constructed;
    i = this.setupWrapper(i);
    i = this.setupContent(i);
    i = this.setupNavigation(i);
    i = this.setupIndicators(i);
    i = this.setupMetaControls(i);
    i = this.setOnClicks(i);
    return i;
  },
  setupWrapper: function setupWrapper(i) {
    i.interaction = $(i.wrapper);
    return i;
  },
  setupContent: function setupContent(i) {
    i.contentAreas = this.findInInteraction(i, i.content);
    return i;
  },
  setupIndicators: function setupIndicators(i) {
    i.indicators = this.findInInteraction(i, i.indicators);
    if (!i.contentAreas.length > 0 && !i.indicators.length > 0) {
      i.warnings.push('no content found');
    }
    i.warn();
    return i;
  },
  setupNavigation: function setupNavigation(i) {
    i.navigation.targets = this.findInInteraction(i, i.navigation.targets);
    i.navigation.prev = this.findInInteraction(i, i.navigation.prev);
    i.navigation.next = this.findInInteraction(i, i.navigation.next);
    if (!i.navigation.targets.length > 0 && !i.navigation.prev.length > 0 && !i.navigation.next.length > 0) {
      i.warnings.push('no navigation found');
    }
    i.warn();
    return i;
  },
  setOnClicks: function setOnClicks(i) {
    for (var nav in i.navigation) {
      if (i.navigation[nav] !== false) {
        i.navigation[nav].preclick = [];
      }
    }
    return i;
  },
  setupMetaControls: function setupMetaControls(i) {
    i.navigation.clear = this.findInInteraction(i, i.meta.clear);
    i.navigation.start = this.findInInteraction(i, i.meta.start);
    return i;
  },
  findInInteraction: function findInInteraction(i, selector) {
    if ($(i.interaction).find(selector).length > 0) {
      return $(i.interaction).find(selector);
    }
    return false;
  },
  getDepth: function getDepth(c, s) {
    var collection = this[c];
    if (s !== undefined) {
      collection = collection[s];
    }
    return collection;
  }
};
'use strict';

var ClickableController = function ClickableController(constructor) {
  this.constructed = new ClickableCautions(constructor);
  this.extend.call(this.constructed, this);
  this.constructed.init(this.constructed);
  return this.constructed;
};
ClickableController.prototype = {
  extend: function extend(obj) {
    for (var attr in obj.__proto__) {
      if (obj.__proto__.hasOwnProperty(attr)) {
        this[attr] = obj.__proto__[attr];
      }
    }
  },
  init: function init() {
    this.navigation.type = 'initial';
    this.setupEvents();
    this.startScreen();
    return this;
  },
  startScreen: function startScreen() {
    if (this.navigation.start) {
      return;
    }
    this.goTo(0);
    return this;
  },
  goTo: function goTo(index) {
    this.index = index;
    this.makeAllInactive();
    this.makeActive();
  },
  prev: function prev() {
    this.decrementIndex();
    this.makeAllInactive();
    this.makeActive();
  },
  next: function next() {
    this.incrementIndex();
    this.makeAllInactive();
    this.makeActive();
  },
  reset: function reset() {
    this.makeAllInactive();
    this.clearNavigationType();
  },
  decrementIndex: function decrementIndex() {

    if (this.index > 0) {
      this.index--;
    } else if (this.infinite) {
      this.index = this.total - 1;
    }
  },
  incrementIndex: function incrementIndex() {
    if (this.index < this.total - 1) {
      this.index++;
    } else if (this.infinite) {
      this.index = 0;
    }
  },
  setupEvents: function setupEvents(i) {
    var self = this;
    $(this.get('navigation', 'prev')).click(function (e) {
      e.preventDefault();
      var buffer = self.get('navigation', 'prev').preclick;
      for (var func in buffer) {
        buffer[func]();
      }
      self.prev();
      self.setNavigationType('linear');
    });
    $(this.get('navigation', 'next')).click(function (e) {
      e.preventDefault();
      var buffer = self.get('navigation', 'next').preclick;
      for (var func in buffer) {
        buffer[func]();
      }
      self.next();
      self.setNavigationType('linear');
    });
    $(this.get('navigation', 'clear')).click(function (e) {
      e.preventDefault();
      var buffer = self.get('navigation', 'clear').preclick;
      for (var func in buffer) {
        buffer[func]();
      }
      self.reset();
      self.setNavigationType('initial');
    });
    $(this.get('navigation', 'start')).click(function (e) {
      e.preventDefault();
      var buffer = self.get('navigation', 'start').preclick;
      for (var func in buffer) {
        buffer[func]();
      }
      self.goTo(0);
      self.setNavigationType('linear');
    });
    $(this.get('navigation', 'targets')).click(function (e) {
      e.preventDefault();
      var buffer = self.get('navigation', 'targets').preclick;
      for (var func in buffer) {
        buffer[func]();
      }
      self.goTo(self.get('navigation', 'targets').index(this));
      self.setNavigationType('targetted');
    });
    return i;
  },
  setNavigationType: function setNavigationType(type) {
    this.clearNavigationType();
    this.navigation.type = type;
    this.addClassSVG(this.interaction, this.navigation.type);
    if (type !== 'start') {
      this.addClassSVG(this.interaction, 'navigated');
    }
  },
  clearNavigationType: function clearNavigationType() {
    this.removeClassSVG(this.interaction, this.navigation.type);
    this.removeClassSVG(this.interaction, 'navigated');
  },
  makeActive: function makeActive() {
    var index = this.index,
        areas = this.get('contentAreas'),
        indicators = this.get('indicators');

    if (!this.isToggle || areas.active !== index) {
      this.addInteractionActiveClass();
      if (areas.length > 0) {
        this.addClassSVG(areas[index], 'active');
        areas.active = index;
      }
      if (indicators.length > 0) {
        this.removeClassSVG(indicators[index], 'visited');
        this.addClassSVG(indicators[index], 'active');
      }
      if (!(areas.length + indicators.length > 0)) {
        this.warnings.push('no content to activate');
        this.warn();
      }
      return;
    }
    areas.active = false;
  },
  makeAllInactive: function makeAllInactive() {
    var areas = this.get('contentAreas'),
        indicators = this.get('indicators');
    if (areas.length) {
      this.removeClassSVG(areas, 'active');
    }
    if (indicators.length) {
      this.makeIndicatorVisited();
      this.removeClassSVG(indicators, 'active');
    }
    this.removeInteractionActiveClass();
  },
  addInteractionActiveClass: function addInteractionActiveClass() {
    this.addClassSVG(this.interaction, 'active-' + this.printIndex);
  },
  removeInteractionActiveClass: function removeInteractionActiveClass() {
    for (var i = 0; i < this.total; i++) {
      this.removeClassSVG(this.interaction, 'active-' + this.printIndex);
    }
  },
  makeIndicatorVisited: function makeIndicatorVisited() {
    var self = this;
    $(this.get('indicators')).each(function () {
      if ($(this).attr('class').indexOf('active') > 0) {
        self.addClassSVG(this, 'visited');
      }
    });
  },
  addClassSVG: function addClassSVG(elem, newClass) {
    if (elem.length > 0) {
      this.addMultipleClasses(elem, newClass);
    } else {
      this.addSingularClass(elem, newClass);
    }
  },
  addSingularClass: function addSingularClass(elem, newClass) {
    if (elem === undefined) {
      return;
    }
    var tempClass = $(elem).attr('class');
    $(elem).attr('class', tempClass + ' ' + newClass);
  },
  addMultipleClasses: function addMultipleClasses(elems, newClass) {
    var tempClass;
    for (var i = 0; i < elems.length; i++) {
      tempClass = $(elems[i]).attr('class');
      $(elems[i]).attr('class', tempClass + ' ' + newClass);
    }
  },
  removeClassSVG: function removeClassSVG(elem, removedClass) {
    if (elem.length > 0) {
      this.removeMultipleClasses(elem, removedClass);
    } else {
      this.removeSingularClass(elem, removedClass);
    }
  },
  removeSingularClass: function removeSingularClass(elem, removedClass) {
    var tempClass = $(elem).attr('class');
    var newClass = tempClass.replace(' ' + removedClass, '');
    $(elem).attr('class', newClass);
  },
  removeMultipleClasses: function removeMultipleClasses(elems, removedClass) {
    var tempClass, newClass;
    for (var i = 0; i < elems.length; i++) {
      tempClass = $(elems[i]).attr('class');
      newClass = tempClass.replace(' ' + removedClass, '');
      $(elems[i]).attr('class', newClass);
    }
  }
};
'use strict';

var ClickableContext = function ClickableContext(constructed) {
  this.constructed = new ClickableCautions(constructed);
  this.constructed = this.init(this.constructed);
  if (this.constructed.context) {
    this.constructed = this.sortCollections(this.constructed);
    this.constructed = this.overrideDefaults(this.constructed);
  }

  return this.constructed;
};

ClickableContext.prototype = {
  init: function init(i) {
    i = this.setInitialData(i);
    i = this.setTotalData(i);
    i = this.setIndexData(i);
    return i;
  },
  overrideDefaults: function overrideDefaults(i) {
    Object.defineProperty(i, 'index', {
      get: function get() {
        return this._index[this.context];
      },
      set: function set(val) {
        return this._index[this.context] = val;
      }
    });
    Object.defineProperty(i, 'printIndex', {
      get: function get() {
        return this.context + '-' + this.index;
      }
    });
    Object.defineProperty(i, 'total', {
      get: function get() {
        return this._total[this.context];
      },
      set: function set(val) {
        return this._total[this.context] = val;
      }
    });
    i.get = this.getContextDepth;
    return i;
  },
  setInitialData: function setInitialdata(i) {
    i.context = false;
    return i;
  },
  findContextCount: function findContextCount(el) {
    var indices = {},
        self = this;
    $(el).each(function () {
      var c = $(this).data('context');
      indices = self.addToOrInit(indices, c);
    });
    return indices;
  },
  setTotalData: function setTotalData(i) {
    var contexts = this.findContextCount(i.contentAreas);
    for (var context in contexts) {
      if (context !== 'context_default') {
        i.context = 'context_default';
        i._total = contexts;
        return i;
      }
    }
    return i;
  },
  setIndexData: function setIndexData(i) {
    if (!i.context) {
      return i;
    }
    i._index = {};
    for (var context in i.total) {
      i._index[context] = 0;
    }
    return i;
  },
  addToOrInit: function addToOrInit(obj, prop) {
    var prop = prop || 'default';
    var key = 'context_' + prop;
    if (obj.hasOwnProperty(key)) {
      obj[key] += 1;
      return obj;
    }
    obj[key] = 0;
    return obj;
  },
  sortCollections: function sortCollections(i) {
    i.contentAreas = this.contextSort(i, 'contentAreas');
    i.indicators = this.contextSort(i, 'indicators');
    i.navigation.targets = this.contextSort(i, 'navigation', 'targets');
    i.navigation.prev = this.contextSort(i, 'navigation', 'prev');
    i.navigation.next = this.contextSort(i, 'navigation', 'next');
    this.warnAboutNavigation(i);
    return i;
  },
  contextSort: function contextSort(i, collection, sub) {
    var all = i.get(collection, sub),
        self = this,
        onclick;
    if (all) {
      onclick = all.preclick;
    }

    $(all).filter(function () {

      all = $(all).not($(this));
      return $(this);
    }).each(function () {

      var c = self.setContextKey($(this));
      if (all[c] === undefined) {
        all[c] = $();
      }
      all[c] = $(all[c]).add($(this));
    });
    if (onclick) {
      all.preclick = onclick;
      all.preclick.push(self.parseContext);
    }
    return all;
  },
  warnAboutNavigation: function warnAboutNavigation(i) {
    for (var key in i.index) {
      if (i.navigation.targets[key] === undefined && i.navigation.prev[key] === undefined && i.navigation.next[key] === undefined) {
        i.warnings.push('there is no navgation for the context ' + key);
      }
    }
    i.warn();
  },
  parseContext: function parseContext(el) {
    if (el !== undefined && $(el).data('context')) {
      this.context = 'context_' + $(el).data('context');
      return;
    }
    this.context = 'context_default';
  },
  getContextDepth: function getContextDepth(c, s) {
    var collection = this[c][this.context];
    if (s !== undefined) {
      collection = collection[s];
    }
    return collection;
  },
  setContextKey: function setContextKey(el) {
    var ctx = el.data('context') || 'default';
    return 'context_' + ctx;
  }
};
'use strict';

(function (global, factory) {

	if (typeof module === "object" && typeof module.exports === "object") {
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {
	var Clickable = function Clickable(args) {
		var constructed = {};
		constructed = new ClickableConstructor(args);
		constructed = new ClickableContext(constructed);
		constructed = new ClickableController(constructed);
		return constructed;
	};
	if (typeof noGlobal === 'undefined') {
		window.Clickable = Clickable;
	}

	return Clickable;
});
//# sourceMappingURL=data:application/json;base64,